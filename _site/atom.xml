<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Goku</title>
 <link href="http://qleelulu.github.com/goku/atom.xml" rel="self"/>
 <link href="http://qleelulu.github.com/goku"/>
 <updated>2013-01-03T01:55:38+08:00</updated>
 <id>http://qleelulu.github.com/goku</id>
 <author>
   <name>QLeelulu</name>
   <email>qleelulu@gmail.com</email>
 </author>

 
 <entry>
   <title>View & ViewEngine</title>
   <link href="http://qleelulu.github.com/goku/doc/view"/>
   <updated>2012-11-22T00:00:00+08:00</updated>
   <id>http://qleelulu.github.com/goku/doc/view</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;Views are the components that display the application&amp;#8217;s user interface (UI)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To render a view, you can just return a &lt;code&gt;ViewResut&lt;/code&gt; which implement the &lt;code&gt;ActionResulter&lt;/code&gt; interface. just like this:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;    &lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Controller&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;blog&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
        &lt;span class='nx'&gt;Get&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;page&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;func&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ctx&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;HttpContext&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ActionResulter&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;blog&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nx'&gt;GetBlogByid&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;10&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

        &lt;span class='c1'&gt;// you can add any val to ViewData&lt;/span&gt;
        &lt;span class='c1'&gt;// then you can use it in template&lt;/span&gt;
        &lt;span class='c1'&gt;// like this: { { .Data.SiteName } }&lt;/span&gt;
        &lt;span class='nx'&gt;ctx&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ViewData&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;SiteName&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;=&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;My Blog&amp;quot;&lt;/span&gt;

        &lt;span class='c1'&gt;// or you can pass a struct to ViewModel&lt;/span&gt;
        &lt;span class='c1'&gt;// then you can use it in template&lt;/span&gt;
        &lt;span class='c1'&gt;// like this: { { .Model.Title } }&lt;/span&gt;
        &lt;span class='c1'&gt;// that same as blog.Title&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;ctx&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;View&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;blog&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='p'&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ctx.View()&lt;/code&gt; will find the view in these rules:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;&lt;span class='mf'&gt;1.&lt;/span&gt; &lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='nx'&gt;ViewPath&lt;/span&gt;&lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='nx'&gt;Controller&lt;/span&gt;&lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='nx'&gt;action&lt;/span&gt;&lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='mf'&gt;2.&lt;/span&gt; &lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='nx'&gt;ViewPath&lt;/span&gt;&lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='nx'&gt;shared&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='nx'&gt;action&lt;/span&gt;&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;for example, &lt;code&gt;ServerConfig.ViewPath&lt;/code&gt; is set to &lt;code&gt;&amp;quot;views&amp;quot;&lt;/code&gt;, and return ctx.View() in &lt;code&gt;home&lt;/code&gt; controller&amp;#8217;s &lt;code&gt;about&lt;/code&gt; action, it will find the view file in this rule:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;&lt;span class='mf'&gt;1.&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='nx'&gt;ProjectDir&lt;/span&gt;&lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='nx'&gt;views&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='nx'&gt;home&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='nx'&gt;about&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;html&lt;/span&gt;
&lt;span class='mf'&gt;2.&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='nx'&gt;ProjectDir&lt;/span&gt;&lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='nx'&gt;views&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='nx'&gt;shared&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='nx'&gt;about&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;html&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;if you want to return a view that specified view name, you can use &lt;a href='http://godoc.org/github.com/QLeelulu/goku#HttpContext.Render'&gt;ctx.Render&lt;/a&gt;:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;    &lt;span class='c1'&gt;// it will find the view in these rules:&lt;/span&gt;
    &lt;span class='c1'&gt;//      1. /{ViewPath}/{Controller}/{viewName}&lt;/span&gt;
    &lt;span class='c1'&gt;//      2. /{ViewPath}/shared/{viewName}&lt;/span&gt;
    &lt;span class='c1'&gt;// if viewName start with &amp;#39;/&amp;#39;,&lt;/span&gt;
    &lt;span class='c1'&gt;// it will find the view direct by viewpath:&lt;/span&gt;
    &lt;span class='c1'&gt;//      1. /{ViewPath}/{viewName}&lt;/span&gt;
    &lt;span class='nx'&gt;ctx&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Render&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;viewName&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;ViewModel&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='custom_viewengine'&gt;Custom ViewEngine&lt;/h2&gt;

&lt;p&gt;ViewEngine is for how to find the view file. To Custom a ViewEngine, just implement the &lt;code&gt;ViewEnginer&lt;/code&gt; interface.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;&lt;span class='c1'&gt;// ViewEnginer interface.&lt;/span&gt;
&lt;span class='c1'&gt;// For how to find the view file.&lt;/span&gt;
&lt;span class='kd'&gt;type&lt;/span&gt; &lt;span class='nx'&gt;ViewEnginer&lt;/span&gt; &lt;span class='kd'&gt;interface&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='c1'&gt;// find the view and layout&lt;/span&gt;
    &lt;span class='c1'&gt;// if template engine not suppot layout, just return empty string&lt;/span&gt;
    &lt;span class='nx'&gt;FindView&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;vi&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;ViewInfo&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;viewPath&lt;/span&gt; &lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;layoutPath&lt;/span&gt; &lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then set it to the &lt;a href='http://godoc.org/github.com/QLeelulu/goku#ServerConfig'&gt;ServerConfig.ViewEnginer&lt;/a&gt;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;&lt;span class='c1'&gt;// server config&lt;/span&gt;
&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;config&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ServerConfig&lt;/span&gt; &lt;span class='p'&gt;=&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ServerConfig&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='nx'&gt;Addr&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;           &lt;span class='s'&gt;&amp;quot;:8888&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='nx'&gt;ViewEnginer&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;    &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;YourViewEngine&lt;/span&gt;&lt;span class='p'&gt;{},&lt;/span&gt; &lt;span class='c1'&gt;// set here&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='kd'&gt;func&lt;/span&gt; &lt;span class='nx'&gt;main&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='nx'&gt;rt&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;RouteTable&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='nx'&gt;Routes&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;routes&lt;/span&gt;&lt;span class='p'&gt;}&lt;/span&gt;
    &lt;span class='nx'&gt;s&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;CreateServer&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;rt&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kc'&gt;nil&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;config&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='nx'&gt;log&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Fatal&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;s&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ListenAndServe&lt;/span&gt;&lt;span class='p'&gt;())&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A simple &lt;a href='https://github.com/QLeelulu/goku-demo/tree/master/custom_viewengine'&gt;ThemeViewEngine&lt;/a&gt; is show how to do this, just check it.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Template</title>
   <link href="http://qleelulu.github.com/goku/doc/template"/>
   <updated>2012-11-22T00:00:00+08:00</updated>
   <id>http://qleelulu.github.com/goku/doc/template</id>
   <content type="html">&lt;p&gt;View Engine decide how to find the view file to render, and then pass to Template Engine parse and generate HTML.&lt;/p&gt;

&lt;h2 id='template_engine'&gt;Template Engine&lt;/h2&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Controller&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;blog&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
    &lt;span class='nx'&gt;Get&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;func&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ctx&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;HttpContext&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ActionResulter&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;

    &lt;span class='c1'&gt;// you can add any val to ViewData&lt;/span&gt;
    &lt;span class='c1'&gt;// then you can use it in template&lt;/span&gt;
    &lt;span class='c1'&gt;// like this: { { .Data.SiteName } }&lt;/span&gt;
    &lt;span class='nx'&gt;ctx&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ViewData&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;SiteName&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;=&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;My Blog&amp;quot;&lt;/span&gt;

    &lt;span class='nx'&gt;blogs&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nx'&gt;GetBlogs&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
    &lt;span class='c1'&gt;// or you can pass a struct to ViewModel&lt;/span&gt;
    &lt;span class='c1'&gt;// then you can use it in template&lt;/span&gt;
    &lt;span class='c1'&gt;// like this: { {range .Model} }  { { .Title } }  { {end} }&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;ctx&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;View&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;blogs&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='p'&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The default template engine is golang&amp;#8217;s &lt;code&gt;html/template&lt;/code&gt;.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;    &lt;span class='nt'&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;{ { .Data.SiteName } }&lt;span class='nt'&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
          { {range .Model} }
            &lt;span class='nt'&gt;&amp;lt;li&lt;/span&gt; &lt;span class='na'&gt;id=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;blog-{ {.Id} }&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
              { {.Title} }
            &lt;span class='nt'&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
          { {end} }
        &lt;span class='nt'&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='layout'&gt;Layout&lt;/h2&gt;

&lt;p&gt;Goku will find layout in these rules:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. /{ViewPath}/{Controller}/{layout}
2. /{ViewPath}/shared/{layout}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the default layout is &lt;code&gt;layout.html&lt;/code&gt;, and you can change it in &lt;a href='http://godoc.org/github.com/QLeelulu/goku#ServerConfig'&gt;ServerConfig.Layout&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;layout.html&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;    &lt;span class='cp'&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class='nt'&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Goku&lt;span class='nt'&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        { { template &amp;quot;head&amp;quot; } }
    &lt;span class='nt'&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
      { { template &amp;quot;body&amp;quot; . } }
    &lt;span class='nt'&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and in the view template, it will look like this:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;    { {define &amp;quot;head&amp;quot;} }
        &lt;span class='c'&gt;&amp;lt;!-- add css or js here --&amp;gt;&lt;/span&gt;
    { {end} }

    { {define &amp;quot;body&amp;quot;} }
        I&amp;#39;m main content.
    { {end} }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;note the dot in &lt;code&gt;{ {template &amp;quot;body&amp;quot; .} }&lt;/code&gt; in layout , it will pass the ViewData to the sub template.&lt;/p&gt;

&lt;h2 id='more_template_engine_support'&gt;More Template Engine Support&lt;/h2&gt;

&lt;p&gt;if you want to use &lt;a href='https://github.com/hoisie/mustache'&gt;mustache&lt;/a&gt; template, check &lt;a href='https://github.com/QLeelulu/mustache.goku'&gt;mustache.goku&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='custom_template_engine'&gt;Custom Template Engine&lt;/h2&gt;

&lt;p&gt;To Custom a Template Engine, just implement the &lt;code&gt;TemplateEnginer&lt;/code&gt; interface.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;&lt;span class='kd'&gt;type&lt;/span&gt; &lt;span class='nx'&gt;TemplateEnginer&lt;/span&gt; &lt;span class='kd'&gt;interface&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='c1'&gt;// render the view with viewData and write to w&lt;/span&gt;
    &lt;span class='nx'&gt;Render&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;viewpath&lt;/span&gt; &lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;layoutPath&lt;/span&gt; &lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;viewData&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;ViewData&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;w&lt;/span&gt; &lt;span class='nx'&gt;io&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Writer&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='c1'&gt;// return whether the tempalte support layout&lt;/span&gt;
    &lt;span class='nx'&gt;SupportLayout&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='kt'&gt;bool&lt;/span&gt;
    &lt;span class='c1'&gt;// template file ext name, default is &amp;quot;.html&amp;quot;&lt;/span&gt;
    &lt;span class='nx'&gt;Ext&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='kt'&gt;string&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For more detail, you can check &lt;a href='https://github.com/QLeelulu/mustache.goku'&gt;mustache.goku&lt;/a&gt;, it will show you how to this.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Router</title>
   <link href="http://qleelulu.github.com/goku/doc/router"/>
   <updated>2012-11-22T00:00:00+08:00</updated>
   <id>http://qleelulu.github.com/goku/doc/router</id>
   <content type="html">&lt;p&gt;Routes map incoming requests for URLs to a Controller and Action. They also are used to construct an URL to a Controller/Action.&lt;/p&gt;

&lt;h2 id='map_route'&gt;Map Route&lt;/h2&gt;

&lt;p&gt;You can map route by this two ways:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;Routes&lt;/span&gt; &lt;span class='p'&gt;[]&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Route&lt;/span&gt; &lt;span class='p'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[]&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Route&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Route&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;Name&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;     &lt;span class='s'&gt;&amp;quot;static&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;IsStatic&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='kc'&gt;true&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;Pattern&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;  &lt;span class='s'&gt;&amp;quot;/public/(.*)&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='p'&gt;},&lt;/span&gt;
    &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Route&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;Name&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;       &lt;span class='s'&gt;&amp;quot;edit&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;Pattern&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;    &lt;span class='s'&gt;&amp;quot;/{controller}/{id}/{action}&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;Default&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;    &lt;span class='kd'&gt;map&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;action&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;edit&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;},&lt;/span&gt;
        &lt;span class='nx'&gt;Constraint&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='kd'&gt;map&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;\\d+&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;},&lt;/span&gt;
    &lt;span class='p'&gt;},&lt;/span&gt;
    &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Route&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;Name&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;    &lt;span class='s'&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;Pattern&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;/{controller}/{action}&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;Default&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='kd'&gt;map&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;controller&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;todo&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;action&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;},&lt;/span&gt;
    &lt;span class='p'&gt;},&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='c1'&gt;// create server with the rules&lt;/span&gt;
&lt;span class='nx'&gt;rt&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;RouteTable&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='nx'&gt;Routes&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;todo&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Routes&lt;/span&gt;&lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='nx'&gt;s&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;CreateServer&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;rt&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kc'&gt;nil&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kc'&gt;nil&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='nx'&gt;log&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Fatal&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;s&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ListenAndServe&lt;/span&gt;&lt;span class='p'&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;&lt;span class='nx'&gt;rt&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nb'&gt;new&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;RouteTable&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='nx'&gt;rt&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Static&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;staticFile&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;/static/(.*)&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='nx'&gt;rt&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Map&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;
    &lt;span class='s'&gt;&amp;quot;blog-page&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='c1'&gt;// route name&lt;/span&gt;
    &lt;span class='s'&gt;&amp;quot;/blog/p/{page}&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='c1'&gt;// pattern&lt;/span&gt;
    &lt;span class='kd'&gt;map&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;controller&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;blog&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;action&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;page&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;page&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;},&lt;/span&gt; &lt;span class='c1'&gt;// default&lt;/span&gt;
    &lt;span class='kd'&gt;map&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;page&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;\\d+&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='c1'&gt;// constraint&lt;/span&gt;
&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='nx'&gt;rt&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Map&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;
    &lt;span class='s'&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='c1'&gt;// route name&lt;/span&gt;
    &lt;span class='s'&gt;&amp;quot;/{controller}/{action}&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='c1'&gt;// pattern&lt;/span&gt;
    &lt;span class='kd'&gt;map&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;controller&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;home&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;action&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;},&lt;/span&gt; &lt;span class='c1'&gt;// default&lt;/span&gt;
&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='static_file_route'&gt;Static File Route&lt;/h2&gt;

&lt;p&gt;When a route set &lt;code&gt;IsStatic&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, if a url matched this route, the request will process as static file. Such as JS, CSS file.&lt;/p&gt;

&lt;p&gt;In production environment, i suggest you proxy the static files with Nginx.&lt;/p&gt;

&lt;h2 id='url_patterns'&gt;URL Patterns&lt;/h2&gt;

&lt;p&gt;A URL pattern can contain literal values and variable placeholders (referred to as URL parameters). The literals and placeholders are located in segments of the URL which are delimited by the slash (/) character.&lt;/p&gt;

&lt;p&gt;When a request is made, the URL is parsed into segments and placeholders, and the variable values are provided to the request handler. This process is similar to the way the data in query strings is parsed and passed to the request handler. In both cases variable information is included in the URL and passed to the handler in the form of key-value pairs. For query strings both the keys and the values are in the URL. For routes, the keys are the placeholder names defined in the URL pattern, and only the values are in the URL.&lt;/p&gt;

&lt;p&gt;In a URL pattern, you define placeholders by enclosing them in braces ( { and } ). You can define more than one placeholder in a segment, but they must be separated by a literal value. For example, &lt;code&gt;{language}-{country}/{action}&lt;/code&gt; is a valid route pattern. However, &lt;code&gt;{language}{country}/{action}&lt;/code&gt; is not a valid pattern, because there is no literal value or delimiter between the placeholders. Therefore, routing cannot determine where to separate the value for the language placeholder from the value for the country placeholder.&lt;/p&gt;

&lt;p&gt;The following table shows valid route patterns and examples of URL requests that match the patterns.&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;em&gt;Route definition&lt;/em&gt;&lt;/th&gt;&lt;th&gt;&lt;em&gt;Example of matching URL&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style='text-align: left;'&gt;{controller}/{action}/{id}&lt;/td&gt;&lt;td style='text-align: left;'&gt;/Products/show/beverages&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style='text-align: left;'&gt;{table}/Details.html&lt;/td&gt;&lt;td style='text-align: left;'&gt;/Products/Details.html&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style='text-align: left;'&gt;blog/{action}/{entry}&lt;/td&gt;&lt;td style='text-align: left;'&gt;/blog/show/123&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style='text-align: left;'&gt;{reporttype}/{year}/{month}/{day}&lt;/td&gt;&lt;td style='text-align: left;'&gt;/sales/2008/1/5&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style='text-align: left;'&gt;{locale}/{action}&lt;/td&gt;&lt;td style='text-align: left;'&gt;/US/show&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style='text-align: left;'&gt;{language}-{country}/{action}&lt;/td&gt;&lt;td style='text-align: left;'&gt;/en-US/show&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id='setting_default_values_for_url_parameters'&gt;Setting Default Values for URL Parameters&lt;/h2&gt;

&lt;p&gt;When you define a route, you can assign a default value for a parameter. The default value is used if a value for that parameter is not included in the URL. You set default values for a route by assigning a map to the &lt;code&gt;Defaults&lt;/code&gt; property of the &lt;code&gt;Route&lt;/code&gt; struct. The following example shows how to add a route that has default values, by using the MapPageRoute(String, String, String, Boolean, RouteValueDictionary) method.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;Routes&lt;/span&gt; &lt;span class='p'&gt;[]&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Route&lt;/span&gt; &lt;span class='p'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[]&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Route&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Route&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;Name&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;    &lt;span class='s'&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;Pattern&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Category/{action}/{categoryName}&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;Default&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='kd'&gt;map&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='s'&gt;&amp;quot;controller&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;category&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;action&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;show&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;categoryName&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;food&amp;quot;&lt;/span&gt;
        &lt;span class='p'&gt;},&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When goku routing handles a URL request, the route definition shown in the example (with default values of food for categoryName and show for action) produces the results that are listed in the following table.&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;URL&lt;/th&gt;&lt;th&gt;Parameter values&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style='text-align: left;'&gt;/Category&lt;/td&gt;&lt;td style='text-align: left;'&gt;action = &amp;#8220;show&amp;#8221; (default value) &lt;br /&gt; categoryName = &amp;#8220;food&amp;#8221; (default value)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style='text-align: left;'&gt;/Category/add&lt;/td&gt;&lt;td style='text-align: left;'&gt;action = &amp;#8220;add&amp;#8221; &lt;br /&gt; categoryName = &amp;#8220;food&amp;#8221; (default value)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style='text-align: left;'&gt;/Category/add/beverages&lt;/td&gt;&lt;td style='text-align: left;'&gt;action = &amp;#8220;add&amp;#8221; &lt;br /&gt; categoryName= &amp;#8220;beverages&amp;#8221;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id='adding_constraints_to_routes'&gt;Adding Constraints to Routes&lt;/h2&gt;

&lt;p&gt;In addition to matching a URL request to a route definition by the number of parameters in the URL, you can specify that values in the parameters meet certain constraints. If a URL contains values that are outside the constraints for a route, that route is not used to handle the request. You add constraints to make sure that the URL parameters contain values that will work in your application.&lt;/p&gt;

&lt;p&gt;Constraints are defined by using regular expressions. You add constraints for a route by assigning a map to the &lt;code&gt;Constraint&lt;/code&gt; property of the &lt;code&gt;Route&lt;/code&gt; struct, or add by &lt;code&gt;RouteTable.Map()&lt;/code&gt;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;Routes&lt;/span&gt; &lt;span class='p'&gt;[]&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Route&lt;/span&gt; &lt;span class='p'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[]&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Route&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Route&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;Name&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;       &lt;span class='s'&gt;&amp;quot;post-list&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;Pattern&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;    &lt;span class='s'&gt;&amp;quot;whatever/{locale}/{year}&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;Constraint&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='kd'&gt;map&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='s'&gt;&amp;quot;locale&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;[a-z]{2}-[a-z]{2}&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;\\d{4}&amp;quot;&lt;/span&gt;
        &lt;span class='p'&gt;},&lt;/span&gt;
    &lt;span class='p'&gt;},&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='c1'&gt;// or&lt;/span&gt;

&lt;span class='nx'&gt;rt&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nb'&gt;new&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;RouteTable&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='nx'&gt;rt&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Map&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;
    &lt;span class='s'&gt;&amp;quot;post-list&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='c1'&gt;// route name&lt;/span&gt;
    &lt;span class='s'&gt;&amp;quot;whatever/{locale}/{year}&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='c1'&gt;// pattern&lt;/span&gt;
    &lt;span class='kd'&gt;map&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;controller&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;action&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;show&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;},&lt;/span&gt; &lt;span class='c1'&gt;// default&lt;/span&gt;
    &lt;span class='kd'&gt;map&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='c1'&gt;// constraint&lt;/span&gt;
        &lt;span class='s'&gt;&amp;quot;locale&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;[a-z]{2}-[a-z]{2}&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;\\d{4}&amp;quot;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When routing handles a URL request, the route definition shown in the previous example produces the results that are listed in the following table.&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;URL&lt;/th&gt;&lt;th&gt;Result&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style='text-align: left;'&gt;/en-us&lt;/td&gt;&lt;td style='text-align: left;'&gt;No match. &lt;br /&gt; Both locale and year are required.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style='text-align: left;'&gt;/en-us/08&lt;/td&gt;&lt;td style='text-align: left;'&gt;No match. &lt;br /&gt; The constraint on year requires 4 digits.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style='text-align: left;'&gt;/en-us/2008&lt;/td&gt;&lt;td style='text-align: left;'&gt;locale = &amp;#8220;en-us&amp;#8221; &lt;br /&gt; year = &amp;#8220;2008&amp;#8221;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;If default value not set, that mean the parameter is required.&lt;/p&gt;

&lt;h2 id='route_data'&gt;Route Data&lt;/h2&gt;

&lt;p&gt;For the Pattern &lt;code&gt;Category/{action}/{categoryName}&lt;/code&gt;, and a URL &lt;code&gt;/Category/add/beverages&lt;/code&gt;, you can get the &lt;code&gt;categoryName&lt;/code&gt; parameter in the controller action by HttpContext:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;&lt;span class='c1'&gt;// ctx is HttpContext&lt;/span&gt;
&lt;span class='nx'&gt;categoryName&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nx'&gt;ctx&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;RouteData&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Params&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;categoryName&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
&lt;span class='c1'&gt;// categoryName == beverages&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='todo'&gt;TODO&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Construct URLs from Routes&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Middleware</title>
   <link href="http://qleelulu.github.com/goku/doc/middleware"/>
   <updated>2012-11-22T00:00:00+08:00</updated>
   <id>http://qleelulu.github.com/goku/doc/middleware</id>
   <content type="html">&lt;p&gt;Sometimes we want to perform logic either before all the request or after all the request. To support this, Goku provides middlewares. Middleware provided a way let you to do something before or after a request.&lt;/p&gt;

&lt;p&gt;&lt;img alt='/assets/themes/goku-mf.png' src='/assets/themes/goku-mf.png' /&gt;&lt;/p&gt;

&lt;h2 id='how_to_create_middleware'&gt;How To Create Middleware&lt;/h2&gt;

&lt;p&gt;To create a middleware, just implement the &lt;a href='http://godoc.org/github.com/QLeelulu/goku#Middlewarer'&gt;Middlewarer&lt;/a&gt; interface.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;&lt;span class='kd'&gt;type&lt;/span&gt; &lt;span class='nx'&gt;Middlewarer&lt;/span&gt; &lt;span class='kd'&gt;interface&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='nx'&gt;OnBeginRequest&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ctx&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;HttpContext&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ActionResulter&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;error&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='nx'&gt;OnBeginMvcHandle&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ctx&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;HttpContext&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ActionResulter&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;error&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='nx'&gt;OnEndMvcHandle&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ctx&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;HttpContext&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ActionResulter&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;error&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='nx'&gt;OnEndRequest&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ctx&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;HttpContext&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ActionResulter&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;error&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;middlewarer interface execute order:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. OnBeginRequest
2. OnBeginMvcHandle
3.  -&amp;gt; {controller}
4. OnEndMvcHandle
5. OnEndRequest&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;notice that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OnBeginRequest &amp;amp; OnEndRequest: All requests will be through these
OnBeginMvcHandle &amp;amp; OnEndMvcHandle: not matched route &amp;amp; static file are not through these&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To add a middleware to the goku server, we can do this when we create goku server:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;&lt;span class='kd'&gt;func&lt;/span&gt; &lt;span class='nx'&gt;main&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='nx'&gt;rt&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;RouteTable&lt;/span&gt;&lt;span class='p'&gt;{}&lt;/span&gt;
    &lt;span class='nx'&gt;middlewares&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='p'&gt;[]&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Middlewarer&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nb'&gt;new&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;middlewares&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;UserMiddleware&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
        &lt;span class='nb'&gt;new&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;middlewares&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;LogMiddleware&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    &lt;span class='c1'&gt;// add middlewares when we create server&lt;/span&gt;
    &lt;span class='nx'&gt;s&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;CreateServer&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;rt&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;middlewares&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;serverConfig&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='nx'&gt;log&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Fatal&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;s&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ListenAndServe&lt;/span&gt;&lt;span class='p'&gt;())&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Log</title>
   <link href="http://qleelulu.github.com/goku/doc/log"/>
   <updated>2012-11-22T00:00:00+08:00</updated>
   <id>http://qleelulu.github.com/goku/doc/log</id>
   <content type="html">&lt;p&gt;To use logger in goku, just:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;goku.Logger().Logln(&amp;quot;i&amp;quot;, &amp;quot;am&amp;quot;, &amp;quot;log&amp;quot;)
goku.Logger().Errorln(&amp;quot;oh&amp;quot;, &amp;quot;no!&amp;quot;, &amp;quot;Server Down!&amp;quot;)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;this will log like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2012/07/14 20:07:46 i am log
2012/07/14 20:07:46 [ERROR] oh no! Server Down!&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TODO:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;like log4j ?&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>HttpContext</title>
   <link href="http://qleelulu.github.com/goku/doc/httpcontext"/>
   <updated>2012-11-22T00:00:00+08:00</updated>
   <id>http://qleelulu.github.com/goku/doc/httpcontext</id>
   <content type="html">&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;&lt;span class='kd'&gt;type&lt;/span&gt; &lt;span class='nx'&gt;HttpContext&lt;/span&gt; &lt;span class='kd'&gt;struct&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='nx'&gt;Request&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;http&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Request&lt;/span&gt; &lt;span class='c1'&gt;// http request&lt;/span&gt;

    &lt;span class='nx'&gt;Method&lt;/span&gt; &lt;span class='kt'&gt;string&lt;/span&gt; &lt;span class='c1'&gt;// http method&lt;/span&gt;

    &lt;span class='c1'&gt;//self fields&lt;/span&gt;
    &lt;span class='nx'&gt;RouteData&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;RouteData&lt;/span&gt;             &lt;span class='c1'&gt;// route data&lt;/span&gt;
    &lt;span class='nx'&gt;ViewData&lt;/span&gt;  &lt;span class='kd'&gt;map&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='kd'&gt;interface&lt;/span&gt;&lt;span class='p'&gt;{}&lt;/span&gt; &lt;span class='c1'&gt;// view data for template&lt;/span&gt;
    &lt;span class='nx'&gt;Data&lt;/span&gt;      &lt;span class='kd'&gt;map&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='kd'&gt;interface&lt;/span&gt;&lt;span class='p'&gt;{}&lt;/span&gt; &lt;span class='c1'&gt;// data for httpcontex&lt;/span&gt;
    &lt;span class='nx'&gt;Result&lt;/span&gt;    &lt;span class='nx'&gt;ActionResulter&lt;/span&gt;         &lt;span class='c1'&gt;// action result&lt;/span&gt;
    &lt;span class='nx'&gt;Err&lt;/span&gt;       &lt;span class='kt'&gt;error&lt;/span&gt;                  &lt;span class='c1'&gt;// process error&lt;/span&gt;
    &lt;span class='nx'&gt;User&lt;/span&gt;      &lt;span class='kt'&gt;string&lt;/span&gt;                 &lt;span class='c1'&gt;// user name&lt;/span&gt;
    &lt;span class='nx'&gt;Canceled&lt;/span&gt;  &lt;span class='kt'&gt;bool&lt;/span&gt;                   &lt;span class='c1'&gt;// cancel continue process the request and return&lt;/span&gt;
    &lt;span class='c1'&gt;// contains filtered or unexported fields&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you want to shared data in a request, you can set it to &lt;code&gt;HttpContext.Data&lt;/code&gt;, and then you can access it in the whole request.&lt;/p&gt;

&lt;p&gt;For more detail, check &lt;a href='http://godoc.org/github.com/QLeelulu/goku#HttpContext'&gt;HttpContext doc&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Form Validation</title>
   <link href="http://qleelulu.github.com/goku/doc/form-validation"/>
   <updated>2012-11-22T00:00:00+08:00</updated>
   <id>http://qleelulu.github.com/goku/doc/form-validation</id>
   <content type="html">&lt;p&gt;you can create a form, to valid the user&amp;#8217;s input, and get the clean value.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;&lt;span class='kn'&gt;import&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;github.com/QLeelulu/goku/form&amp;quot;&lt;/span&gt;

&lt;span class='kd'&gt;func&lt;/span&gt; &lt;span class='nx'&gt;CreateCommentForm&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Form&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='nx'&gt;name&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nx'&gt;NewCharField&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Name&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kc'&gt;true&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;Range&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;10&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;Field&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
    &lt;span class='nx'&gt;nickName&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nx'&gt;NewCharField&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;nick_name&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Nick Name&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kc'&gt;false&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;Min&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;Max&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;20&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;Field&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
    &lt;span class='nx'&gt;age&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nx'&gt;NewIntegerField&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Age&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kc'&gt;true&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;Range&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;18&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;50&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;Field&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
    &lt;span class='nx'&gt;content&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nx'&gt;NewTextField&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Content&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kc'&gt;true&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;Min&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;10&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;Field&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;

    &lt;span class='nx'&gt;form&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nx'&gt;NewForm&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;name&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;nickName&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;age&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;content&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;form&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and then you can use this form like this:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;&lt;span class='nx'&gt;f&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nx'&gt;CreateCommentForm&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
&lt;span class='nx'&gt;f&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;FillByRequest&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ctx&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Request&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='nx'&gt;f&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Valid&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='c1'&gt;// after valid, we can get the clean values&lt;/span&gt;
    &lt;span class='nx'&gt;m&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nx'&gt;f&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;CleanValues&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
    &lt;span class='c1'&gt;// and now you can save m to database&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='c1'&gt;// if not valid&lt;/span&gt;
    &lt;span class='c1'&gt;// we can get the valid errors&lt;/span&gt;
    &lt;span class='nx'&gt;errs&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nx'&gt;f&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Errors&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;checkout &lt;a href='https://github.com/QLeelulu/goku/blob/master/form/form_test.go'&gt;form_test.go&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Filter</title>
   <link href="http://qleelulu.github.com/goku/doc/filter"/>
   <updated>2012-11-22T00:00:00+08:00</updated>
   <id>http://qleelulu.github.com/goku/doc/filter</id>
   <content type="html">&lt;p&gt;Controllers define action methods that usually have a one-to-one relationship with possible user interactions, such as clicking a link or submitting a form. For example, when the user clicks a link, a request is routed to the designated controller, and the corresponding action method is called.&lt;/p&gt;

&lt;p&gt;Sometimes you want to perform logic either before an action method is called or after an action method runs. To support this, Goku provides filters. Filters are custom stuct that provide both a declarative and programmatic means to add pre-action and post-action behavior to controller action methods.&lt;/p&gt;

&lt;h2 id='how_to_create_filter'&gt;How To Create Filter&lt;/h2&gt;

&lt;p&gt;To create a filter, just implement the &lt;a href='http://godoc.org/github.com/QLeelulu/goku#Filter'&gt;Filter&lt;/a&gt; interface.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;&lt;span class='kd'&gt;type&lt;/span&gt; &lt;span class='nx'&gt;Filter&lt;/span&gt; &lt;span class='kd'&gt;interface&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='nx'&gt;OnActionExecuting&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ctx&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;HttpContext&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ActionResulter&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;error&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='nx'&gt;OnActionExecuted&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ctx&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;HttpContext&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ActionResulter&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;error&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='nx'&gt;OnResultExecuting&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ctx&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;HttpContext&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ActionResulter&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;error&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='nx'&gt;OnResultExecuted&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ctx&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;HttpContext&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ActionResulter&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;error&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Order of the filters execution is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. OnActionExecuting
2. -&amp;gt; Execute Action -&amp;gt; return ActionResulter
3. OnActionExecuted
4. OnResultExecuting
5. -&amp;gt; ActionResulter.ExecuteResult
6. OnResultExecuted&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want cancel the request(end the request) in the filter, you can return an &lt;code&gt;ActionResulter&lt;/code&gt; or return &lt;code&gt;error&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is a example show how to create a Auth filter.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;&lt;span class='kd'&gt;type&lt;/span&gt; &lt;span class='nx'&gt;RequireLoginFilter&lt;/span&gt; &lt;span class='kd'&gt;struct&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='kd'&gt;func&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;f&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;RequireLoginFilter&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nx'&gt;OnActionExecuting&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ctx&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;HttpContext&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ar&lt;/span&gt; &lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ActionResulter&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;err&lt;/span&gt; &lt;span class='kt'&gt;error&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='nx'&gt;c&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;err&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nx'&gt;ctx&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Request&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Cookie&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='nx'&gt;err&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='kc'&gt;nil&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;user&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;_&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nx'&gt;users&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;GetByTicket&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;c&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Value&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='nx'&gt;user&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='kc'&gt;nil&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='c1'&gt;// we can set data to ctx.Data,&lt;/span&gt;
            &lt;span class='c1'&gt;// then we can get it any where.&lt;/span&gt;
            &lt;span class='nx'&gt;ctx&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Data&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;user&lt;/span&gt;
            &lt;span class='k'&gt;return&lt;/span&gt;
        &lt;span class='p'&gt;}&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='nx'&gt;ctx&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;IsAjax&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;ar&lt;/span&gt; &lt;span class='p'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;ctx&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Json&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;map&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='kd'&gt;interface&lt;/span&gt;&lt;span class='p'&gt;{}{&lt;/span&gt;
            &lt;span class='s'&gt;&amp;quot;success&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;   &lt;span class='kc'&gt;false&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
            &lt;span class='s'&gt;&amp;quot;needLogin&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='kc'&gt;true&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
            &lt;span class='s'&gt;&amp;quot;errors&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;    &lt;span class='s'&gt;&amp;quot;Please Login&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='p'&gt;})&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;ar&lt;/span&gt; &lt;span class='p'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;ctx&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Redirect&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;/user/login?returnurl=&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='nx'&gt;url&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;QueryEscape&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ctx&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Request&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;RequestURI&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='kd'&gt;func&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;f&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;RequireLoginFilter&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nx'&gt;OnActionExecuted&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ctx&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;HttpContext&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ActionResulter&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;error&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='kc'&gt;nil&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kc'&gt;nil&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='kd'&gt;func&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;f&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;RequireLoginFilter&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nx'&gt;OnResultExecuting&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ctx&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;HttpContext&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ActionResulter&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;error&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='kc'&gt;nil&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kc'&gt;nil&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='kd'&gt;func&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;f&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;RequireLoginFilter&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nx'&gt;OnResultExecuted&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ctx&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;HttpContext&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ActionResulter&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;error&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='kc'&gt;nil&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kc'&gt;nil&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then we can apply this filter to controller:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;_&lt;/span&gt; &lt;span class='p'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Controller&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;home&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
    &lt;span class='c1'&gt;// apply filter to controller,&lt;/span&gt;
    &lt;span class='c1'&gt;// all this controller&amp;#39;s actions.&lt;/span&gt;
    &lt;span class='nx'&gt;Filters&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;RequireLoginFilter&lt;/span&gt;&lt;span class='p'&gt;{}).&lt;/span&gt;
    &lt;span class='c1'&gt;// index action&lt;/span&gt;
    &lt;span class='nx'&gt;Get&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;func&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ctx&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;HttpContext&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ActionResulter&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;ctx&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;View&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kc'&gt;nil&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='p'&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or we can only apply the filter to the specified action.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;_&lt;/span&gt; &lt;span class='p'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Controller&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;home&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
    &lt;span class='c1'&gt;// index action&lt;/span&gt;
    &lt;span class='nx'&gt;Get&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;func&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ctx&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;HttpContext&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ActionResulter&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;ctx&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;View&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kc'&gt;nil&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='p'&gt;}).&lt;/span&gt;
    &lt;span class='c1'&gt;// only apply filter to index action&lt;/span&gt;
    &lt;span class='nx'&gt;Filters&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;RequireLoginFilter&lt;/span&gt;&lt;span class='p'&gt;{})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>DB</title>
   <link href="http://qleelulu.github.com/goku/doc/db"/>
   <updated>2012-11-22T00:00:00+08:00</updated>
   <id>http://qleelulu.github.com/goku/doc/db</id>
   <content type="html">&lt;p&gt;simple database api.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;    &lt;span class='nx'&gt;db&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;err&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nx'&gt;OpenMysql&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;mymysql&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;tcp:localhost:3306*dbname/username/pwd&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

    &lt;span class='c1'&gt;// you can use all the api in golang&amp;#39;s database/sql&lt;/span&gt;
    &lt;span class='nx'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;err&lt;/span&gt; &lt;span class='p'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;db&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Query&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;select 1&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

    &lt;span class='c1'&gt;// or you can use some simple api provide by goku&lt;/span&gt;
    &lt;span class='nx'&gt;r&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;err&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nx'&gt;db&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Select&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;test_blog&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;SqlQueryInfo&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;Fields&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;id, title, content&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;Where&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;  &lt;span class='s'&gt;&amp;quot;id&amp;gt;?&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;Params&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[]&lt;/span&gt;&lt;span class='kd'&gt;interface&lt;/span&gt;&lt;span class='p'&gt;{}{&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;},&lt;/span&gt;
        &lt;span class='nx'&gt;Limit&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;  &lt;span class='mi'&gt;10&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;Offset&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;Group&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;  &lt;span class='s'&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;Order&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;  &lt;span class='s'&gt;&amp;quot;id desc&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='p'&gt;})&lt;/span&gt;

    &lt;span class='c1'&gt;// insert map&lt;/span&gt;
    &lt;span class='nx'&gt;vals&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='kd'&gt;map&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='kd'&gt;interface&lt;/span&gt;&lt;span class='p'&gt;{}{&lt;/span&gt;
        &lt;span class='s'&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;golang&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='s'&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Go is an open source programming environment that &amp;quot;&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt;
            &lt;span class='s'&gt;&amp;quot;makes it easy to build simple, reliable, and efficient software.&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='s'&gt;&amp;quot;create_at&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;time&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Now&lt;/span&gt;&lt;span class='p'&gt;(),&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    &lt;span class='nx'&gt;r&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;err&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nx'&gt;db&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Insert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;test_blog&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;vals&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

    &lt;span class='c1'&gt;// insert struct&lt;/span&gt;
    &lt;span class='nx'&gt;blog&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nx'&gt;TestBlog&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;Title&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;    &lt;span class='s'&gt;&amp;quot;goku&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;Content&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;  &lt;span class='s'&gt;&amp;quot;a mvc framework&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;CreateAt&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;time&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Now&lt;/span&gt;&lt;span class='p'&gt;(),&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    &lt;span class='nx'&gt;r&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;err&lt;/span&gt; &lt;span class='p'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;db&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;InsertStruct&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;blog&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

    &lt;span class='c1'&gt;// get struct&lt;/span&gt;
    &lt;span class='nx'&gt;blog&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;TestBlog&lt;/span&gt;&lt;span class='p'&gt;{}&lt;/span&gt;
    &lt;span class='nx'&gt;err&lt;/span&gt; &lt;span class='p'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;db&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;GetStruct&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;blog&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;id=?&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

    &lt;span class='c1'&gt;// get struct list&lt;/span&gt;
    &lt;span class='nx'&gt;qi&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nx'&gt;SqlQueryInfo&lt;/span&gt;&lt;span class='p'&gt;{}&lt;/span&gt;
    &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;blogs&lt;/span&gt; &lt;span class='p'&gt;[]&lt;/span&gt;&lt;span class='nx'&gt;Blog&lt;/span&gt;
    &lt;span class='nx'&gt;err&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nx'&gt;db&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;GetStructs&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;blogs&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;qi&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

    &lt;span class='c1'&gt;// update by map&lt;/span&gt;
    &lt;span class='nx'&gt;vals&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='kd'&gt;map&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='kd'&gt;interface&lt;/span&gt;&lt;span class='p'&gt;{}{&lt;/span&gt;
        &lt;span class='s'&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;js&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    &lt;span class='nx'&gt;r&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;err2&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nx'&gt;db&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Update&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;test_blog&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;vals&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;id=?&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;blog&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Id&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

    &lt;span class='c1'&gt;// delete&lt;/span&gt;
    &lt;span class='nx'&gt;r&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;err&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nx'&gt;db&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Delete&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;test_blog&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;id=?&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;8&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;checkout &lt;a href='https://github.com/QLeelulu/goku/blob/master/db_test.go'&gt;db_test.go&lt;/a&gt;&lt;/p&gt;

&lt;h3 id='database_sql_debug'&gt;DataBase SQL Debug&lt;/h3&gt;

&lt;p&gt;if you want to debug what the sql query is, set db.Debug to &lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;    &lt;span class='nx'&gt;db&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;err&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nx'&gt;OpenMysql&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;mymysql&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;tcp:localhost:3306*test_db/username/pwd&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='nx'&gt;db&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Debug&lt;/span&gt; &lt;span class='p'&gt;=&lt;/span&gt; &lt;span class='kc'&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;after you set db.Debug to true, while you run a db command, it will print the sql query to the log, juse like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2012/07/30 20:58:03 SQL: UPDATE `user` SET friends=friends+? WHERE id=?;
                    PARAMS: [[1 2]]&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Controller & Action</title>
   <link href="http://qleelulu.github.com/goku/doc/controller--action"/>
   <updated>2012-11-22T00:00:00+08:00</updated>
   <id>http://qleelulu.github.com/goku/doc/controller--action</id>
   <content type="html">&lt;p&gt;Goku maps URLs to controllers that regiest to goku server. Controllers process incoming requests, handle user input and interactions, and execute appropriate application logic. A controller typically calls a separate view component to generate the HTML markup for the request.&lt;/p&gt;

&lt;h2 id='controllerbuilder'&gt;ControllerBuilder&lt;/h2&gt;

&lt;p&gt;We build controller with &lt;a href='http://go.pkgdoc.org/github.com/QLeelulu/goku#ControllerBuilder'&gt;ControllerBuilder&lt;/a&gt;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;&lt;span class='c1'&gt;// a home controller builder&lt;/span&gt;
&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;cb&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ControllerBuilder&lt;/span&gt; &lt;span class='p'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Controller&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;home&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='c1'&gt;// add a &amp;quot;index&amp;quot; action to &amp;quot;home&amp;quot; controller for http get&lt;/span&gt;
&lt;span class='nx'&gt;cb&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Get&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;func&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ctx&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;HttpContext&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ActionResulter&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;ctx&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Html&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='p'&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Use &lt;code&gt;goku.Controller(&amp;quot;controller-name&amp;quot;)&lt;/code&gt; to get a controller builder. If the controller &lt;code&gt;&amp;quot;controller-name&amp;quot;&lt;/code&gt; exist, it will just return the same controller builder.&lt;/p&gt;

&lt;h2 id='action'&gt;Action&lt;/h2&gt;

&lt;p&gt;User interaction with goku MVC applications is organized around controllers and action methods. The controller defines action methods. Controllers can include as many action methods as needed.&lt;/p&gt;

&lt;p&gt;When a user enters a URL into the browser, the MVC application uses routing rules to parse the URL and to determine the path of the controller. The controller then determines the appropriate action method to handle the request. By default, the URL of a request is treated as a sub-path that includes the controller name followed by the action name. For example, if a user enters the URL &lt;code&gt;http://abc.com/Products/Categories&lt;/code&gt;, the sub-path is &lt;code&gt;/Products/Categories&lt;/code&gt;. The default routing rule treats &amp;#8220;Products&amp;#8221; as the controller. It treats &amp;#8220;Categories&amp;#8221; as the name of the action. Therefore, the routing rule invokes the Categories action of the Products controller in order to process the request. If the URL ends with &lt;code&gt;/Products/Detail/5&lt;/code&gt;, the default routing rule treats &lt;code&gt;&amp;quot;Detail&amp;quot;&lt;/code&gt; as the name of the action, and the Detail action of the Products controller is invoked to process the request.&lt;/p&gt;

&lt;p&gt;The following example shows a controller that has a &lt;code&gt;HelloWorld&lt;/code&gt; action for http GET method.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;_&lt;/span&gt; &lt;span class='p'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Controller&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;my&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
    &lt;span class='nx'&gt;Action&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;get&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;HelloWorld&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;func&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ctx&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;HttpContext&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ActionResulter&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;ctx&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Html&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='p'&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href='http://go.pkgdoc.org/github.com/QLeelulu/goku#ControllerBuilder'&gt;ControllerBuilder&lt;/a&gt; has some helper method: &lt;code&gt;Get&lt;/code&gt;, &lt;code&gt;Post&lt;/code&gt;, &lt;code&gt;Put&lt;/code&gt;. So you can do it the same by this code:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;_&lt;/span&gt; &lt;span class='p'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Controller&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;my&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
    &lt;span class='nx'&gt;Get&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;HelloWorld&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;func&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ctx&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;HttpContext&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ActionResulter&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;ctx&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Html&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='p'&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you set http method to &lt;code&gt;all&lt;/code&gt;, the action will match all http method, but Priority is low. &lt;br /&gt;For example:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;_&lt;/span&gt; &lt;span class='p'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Controller&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
    &lt;span class='c1'&gt;// action 1&lt;/span&gt;
    &lt;span class='nx'&gt;Post&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;edit&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;func&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ctx&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;HttpContext&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ActionResulter&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;ctx&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;View&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kc'&gt;nil&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='p'&gt;}).&lt;/span&gt;
    &lt;span class='c1'&gt;// action 2&lt;/span&gt;
    &lt;span class='nx'&gt;Action&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;all&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;edit&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;func&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ctx&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;HttpContext&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ActionResulter&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;ctx&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;View&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kc'&gt;nil&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='p'&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A &lt;code&gt;Http POST /user/edit&lt;/code&gt; request will process by &lt;code&gt;Post(&amp;quot;edit&amp;quot;, ...)&lt;/code&gt;, &lt;br /&gt;but a &lt;code&gt;Http GET /user/edit&lt;/code&gt; request will process by &lt;code&gt;Action(&amp;quot;all&amp;quot;, &amp;quot;edit&amp;quot;, ...)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id='actionresult_return_type'&gt;ActionResult Return Type&lt;/h2&gt;

&lt;p&gt;Action methods return an instance of a struct that implement the &lt;a href='http://go.pkgdoc.org/github.com/QLeelulu/goku#ActionResulter'&gt;ActionResulter&lt;/a&gt; interface. There are different action result types, depending on the task that the action method is performing. For example, the most common action is to call the &lt;code&gt;HttpContext.View&lt;/code&gt; method. The View method returns an instance of the ViewResult struct, which is implement the ActionResulter interface.&lt;/p&gt;

&lt;p&gt;The following table shows the built-in action result types and the action helper methods that return them.&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Action Result&lt;/th&gt;&lt;th&gt;Helper Method&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style='text-align: left;'&gt;&lt;a href='http://godoc.org/github.com/QLeelulu/goku#ViewResult'&gt;ViewResult&lt;/a&gt;&lt;/td&gt;&lt;td style='text-align: left;'&gt;&lt;a href='http://godoc.org/github.com/QLeelulu/goku#HttpContext.View'&gt;ctx.View&lt;/a&gt;&lt;/td&gt;&lt;td style='text-align: left;'&gt;Renders a view as a Web page.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style='text-align: left;'&gt;&lt;a href='http://godoc.org/github.com/QLeelulu/goku#ViewResult'&gt;ViewResult&lt;/a&gt;&lt;/td&gt;&lt;td style='text-align: left;'&gt;&lt;a href='http://godoc.org/github.com/QLeelulu/goku#HttpContext.RenderPartial'&gt;ctx.RenderPartial&lt;/a&gt;&lt;/td&gt;&lt;td style='text-align: left;'&gt;Renders a partial view, mean that not render the layout.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style='text-align: left;'&gt;&lt;a href='http://godoc.org/github.com/QLeelulu/goku#ActionResulter'&gt;ActionResulter&lt;/a&gt;&lt;/td&gt;&lt;td style='text-align: left;'&gt;&lt;a href='http://godoc.org/github.com/QLeelulu/goku#HttpContext.Redirect'&gt;ctx.Redirect&lt;/a&gt;&lt;/td&gt;&lt;td style='text-align: left;'&gt;Redirects to another action method by using its URL.(&lt;code&gt;302&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style='text-align: left;'&gt;&lt;a href='http://godoc.org/github.com/QLeelulu/goku#ActionResulter'&gt;ActionResulter&lt;/a&gt;&lt;/td&gt;&lt;td style='text-align: left;'&gt;&lt;a href='http://godoc.org/github.com/QLeelulu/goku#HttpContext.RedirectPermanent'&gt;ctx.RedirectPermanent&lt;/a&gt;&lt;/td&gt;&lt;td style='text-align: left;'&gt;Redirects to another action method by using its URL.(&lt;code&gt;301&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style='text-align: left;'&gt;&lt;a href='http://godoc.org/github.com/QLeelulu/goku#ContentResult'&gt;ContentResult&lt;/a&gt;&lt;/td&gt;&lt;td style='text-align: left;'&gt;No&lt;/td&gt;&lt;td style='text-align: left;'&gt;Returns binary output to write to the response.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style='text-align: left;'&gt;&lt;a href='http://godoc.org/github.com/QLeelulu/goku#ActionResulter'&gt;ActionResulter&lt;/a&gt;&lt;/td&gt;&lt;td style='text-align: left;'&gt;&lt;a href='http://godoc.org/github.com/QLeelulu/goku#HttpContext.Json'&gt;ctx.Json&lt;/a&gt;&lt;/td&gt;&lt;td style='text-align: left;'&gt;Returns a serialized JSON object.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style='text-align: left;'&gt;&lt;a href='http://godoc.org/github.com/QLeelulu/goku#ActionResulter'&gt;ActionResulter&lt;/a&gt;&lt;/td&gt;&lt;td style='text-align: left;'&gt;&lt;a href='http://godoc.org/github.com/QLeelulu/goku#HttpContext.Html'&gt;ctx.Html&lt;/a&gt;&lt;/td&gt;&lt;td style='text-align: left;'&gt;Returns string content, but set response Content-Type to text/html .&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style='text-align: left;'&gt;&lt;a href='http://godoc.org/github.com/QLeelulu/goku#ActionResulter'&gt;ActionResulter&lt;/a&gt;&lt;/td&gt;&lt;td style='text-align: left;'&gt;&lt;a href='http://godoc.org/github.com/QLeelulu/goku#HttpContext.Raw'&gt;ctx.Raw&lt;/a&gt;&lt;/td&gt;&lt;td style='text-align: left;'&gt;Returns string content, but set response Content-Type to text/plain .&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style='text-align: left;'&gt;&lt;a href='http://godoc.org/github.com/QLeelulu/goku#ActionResulter'&gt;ActionResulter&lt;/a&gt;&lt;/td&gt;&lt;td style='text-align: left;'&gt;&lt;a href='http://godoc.org/github.com/QLeelulu/goku#HttpContext.NotModified'&gt;ctx.NotModified&lt;/a&gt;&lt;/td&gt;&lt;td style='text-align: left;'&gt;Returns 304 not modified .&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td style='text-align: left;'&gt;&lt;a href='http://godoc.org/github.com/QLeelulu/goku#ActionResulter'&gt;ActionResulter&lt;/a&gt;&lt;/td&gt;&lt;td style='text-align: left;'&gt;&lt;a href='http://godoc.org/github.com/QLeelulu/goku#HttpContext.NotFound'&gt;ctx.NotFound&lt;/a&gt;&lt;/td&gt;&lt;td style='text-align: left;'&gt;Returns 404 page not found .&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id='custom_actionresult'&gt;Custom ActionResult&lt;/h2&gt;

&lt;p&gt;To implement your own action result, you just need to implement the &lt;a href='http://godoc.org/github.com/QLeelulu/goku#ActionResulter'&gt;ActionResulter&lt;/a&gt; interface, and return it in the action.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Intro</title>
   <link href="http://qleelulu.github.com/goku/doc/intro"/>
   <updated>2012-11-08T00:00:00+08:00</updated>
   <id>http://qleelulu.github.com/goku/doc/intro</id>
   <content type="html">&lt;h2 id='simple_mvc_project'&gt;Simple MVC project&lt;/h2&gt;

&lt;p&gt;Let us create a simple mvc project, show how goku work.&lt;/p&gt;

&lt;p&gt;The project&amp;#8217;s directory structure is like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── app.go
└── gokudemo
    ├── config.go
    ├── controllers
    │   └── home.go
    ├── model
    ├── routes.go
    ├── static
    │   ├── css
    │   ├── img
    │   └── js
    └── views
        ├── home
        │   └── index.html
        └── shared
            └── layout.html&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find this example &lt;a href='http://github.com/QLeelulu/goku-demo'&gt;in here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id='route'&gt;Route&lt;/h3&gt;

&lt;p&gt;An URL request like &amp;#8220;http://www.abc.com/home/index&amp;#8221; will map to &lt;code&gt;home&lt;/code&gt; controller&amp;#8217;s &lt;code&gt;index&lt;/code&gt; action. &lt;br /&gt;This was rewrite by the routes:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;Routes&lt;/span&gt; &lt;span class='p'&gt;[]&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Route&lt;/span&gt; &lt;span class='p'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[]&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Route&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Route&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;Name&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;     &lt;span class='s'&gt;&amp;quot;static&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;IsStatic&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='kc'&gt;true&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;Pattern&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;  &lt;span class='s'&gt;&amp;quot;/public/(.*)&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='p'&gt;},&lt;/span&gt;
    &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Route&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;Name&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;    &lt;span class='s'&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;Pattern&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;/{controller}/{action}&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;Default&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='kd'&gt;map&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;controller&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;home&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;action&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;},&lt;/span&gt;
    &lt;span class='p'&gt;},&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;static&lt;/code&gt; route set &lt;code&gt;IsStatic&lt;/code&gt; to true, mean that if the url matched this route, will process the request as static file. &lt;br /&gt;The &lt;code&gt;default&lt;/code&gt; route mean that the url &lt;code&gt;/user/info&lt;/code&gt;, will map to &lt;code&gt;user&lt;/code&gt; controller&amp;#8217;s &lt;code&gt;info&lt;/code&gt; action, and the url &lt;code&gt;/&lt;/code&gt; will map to &lt;code&gt;home&lt;/code&gt; controller&amp;#8217;s &lt;code&gt;index&lt;/code&gt; action, because this is the default value.&lt;/p&gt;

&lt;p&gt;We register the routes to goku server by this way (&lt;a href='http://github.com/QLeelulu/goku-demo/app.go'&gt;app.go&lt;/a&gt;) :&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;&lt;span class='kd'&gt;func&lt;/span&gt; &lt;span class='nx'&gt;main&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='nx'&gt;rt&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;RouteTable&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='nx'&gt;Routes&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;gokudemo&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Routes&lt;/span&gt;&lt;span class='p'&gt;}&lt;/span&gt;
    &lt;span class='nx'&gt;middlewares&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='p'&gt;[]&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Middlewarer&lt;/span&gt;&lt;span class='p'&gt;{}&lt;/span&gt;
    &lt;span class='nx'&gt;s&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;CreateServer&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;rt&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;middlewares&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;gokudemo&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Config&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='nx'&gt;log&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Fatal&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;s&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ListenAndServe&lt;/span&gt;&lt;span class='p'&gt;())&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id='controller__action'&gt;Controller &amp;amp; Action&lt;/h3&gt;

&lt;p&gt;Add a controller like this code(&lt;a href='http://github.com/QLeelulu/goku-demo/controllers/home.go'&gt;controllers/home.go&lt;/a&gt;):&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;&lt;span class='kn'&gt;package&lt;/span&gt; &lt;span class='nx'&gt;controllers&lt;/span&gt;

&lt;span class='kn'&gt;import&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;
    &lt;span class='s'&gt;&amp;quot;github.com/QLeelulu/goku&amp;quot;&lt;/span&gt;
&lt;span class='p'&gt;)&lt;/span&gt;

&lt;span class='c1'&gt;// home controller&lt;/span&gt;
&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;_&lt;/span&gt; &lt;span class='p'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Controller&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;home&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
&lt;span class='c1'&gt;// index action&lt;/span&gt;
&lt;span class='nx'&gt;Get&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;func&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ctx&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;HttpContext&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ActionResulter&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='nx'&gt;ctx&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ViewData&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Message&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;=&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;ctx&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;View&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kc'&gt;nil&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='p'&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code register a &lt;code&gt;home&lt;/code&gt; controller, with a action named &lt;code&gt;index&lt;/code&gt; for http &lt;code&gt;GET&lt;/code&gt; methed, and add a viewdate &lt;code&gt;Message&lt;/code&gt; can be use in the view.&lt;/p&gt;

&lt;p&gt;If the controllers register in the other packages, we must import it:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;&lt;span class='kn'&gt;import&lt;/span&gt; &lt;span class='nx'&gt;_&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;gokudemo/gokudemo/controllers&amp;quot;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;we just import it but ignore it by &lt;code&gt;_&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id='view'&gt;View&lt;/h3&gt;

&lt;p&gt;In the &lt;code&gt;home&lt;/code&gt; controller&amp;#8217;s &lt;code&gt;index&lt;/code&gt; action, we render view by &lt;code&gt;return ctx.View(nil)&lt;/code&gt;. This will find the view template file by the location &lt;code&gt;/views/home/index.html&lt;/code&gt;. And the default layout template is in &lt;code&gt;/views/shared/layout.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;the layout.html:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE HTML&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;Goku Demo&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;Goku Demo&amp;lt;/h1&amp;gt;
    &amp;#123;{ template &quot;body&quot; . }&amp;#125;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the /views/home/index.html:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#123;{define &quot;body&quot;}&amp;#125;
    &amp;#123;{.Data.Message}&amp;#125;
&amp;#123;{end}&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We get the data pass from the action in view by &lt;code&gt;{ {.Data.Message} }&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id='run_the_app'&gt;Run the app&lt;/h2&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;go run app.go 
2012/11/23 23:06:51 Server start on :8080
2012/11/23 23:07:13 D 200 GET / 
2012/11/23 23:07:13 N 404 GET /favicon.ico
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can open a web-browser with the URL &lt;code&gt;http://127.0.0.1:8080&lt;/code&gt; to see what happen.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>About</title>
   <link href="http://qleelulu.github.com/goku/doc/about"/>
   <updated>2012-11-08T00:00:00+08:00</updated>
   <id>http://qleelulu.github.com/goku/doc/about</id>
   <content type="html">&lt;h1 id='goku'&gt;goku&lt;/h1&gt;

&lt;p&gt;goku is a Web Mvc Framework for golang, mostly like ASP.NET MVC. &lt;br /&gt;goku is simple and powerful. &lt;br /&gt;Base Features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mvc (Lightweight model)&lt;/li&gt;

&lt;li&gt;route&lt;/li&gt;

&lt;li&gt;multi template engine and layout&lt;/li&gt;

&lt;li&gt;simple database api&lt;/li&gt;

&lt;li&gt;form validation&lt;/li&gt;

&lt;li&gt;filter for controller or action&lt;/li&gt;

&lt;li&gt;middleware&lt;/li&gt;

&lt;li&gt;and more&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='doc__api'&gt;&lt;a href='http://go.pkgdoc.org/github.com/QLeelulu/goku'&gt;doc &amp;amp; api&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;now goku is in the &lt;strong&gt;&lt;code&gt;preview version, anything can be change&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id='installation'&gt;Installation&lt;/h2&gt;

&lt;p&gt;To install goku, simply run &lt;code&gt;go get github.com/QLeelulu/goku&lt;/code&gt;. &lt;br /&gt;To use it in a program, use &lt;code&gt;import &amp;quot;github.com/QLeelulu/goku&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;h2 id='example'&gt;Example&lt;/h2&gt;

&lt;p&gt;Here is a simple example, or you can check &lt;a href='/doc/intro'&gt;Intro&lt;/a&gt; for more detail.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;&lt;span class='kn'&gt;package&lt;/span&gt; &lt;span class='nx'&gt;main&lt;/span&gt;

&lt;span class='kn'&gt;import&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;
    &lt;span class='s'&gt;&amp;quot;github.com/QLeelulu/goku&amp;quot;&lt;/span&gt;
    &lt;span class='s'&gt;&amp;quot;log&amp;quot;&lt;/span&gt;
    &lt;span class='s'&gt;&amp;quot;path&amp;quot;&lt;/span&gt;
    &lt;span class='s'&gt;&amp;quot;runtime&amp;quot;&lt;/span&gt;
    &lt;span class='s'&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
&lt;span class='p'&gt;)&lt;/span&gt;

&lt;span class='c1'&gt;// routes&lt;/span&gt;
&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;routes&lt;/span&gt; &lt;span class='p'&gt;[]&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Route&lt;/span&gt; &lt;span class='p'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[]&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Route&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='c1'&gt;// static file route&lt;/span&gt;
    &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Route&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;Name&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;     &lt;span class='s'&gt;&amp;quot;static&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;IsStatic&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='kc'&gt;true&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;Pattern&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;  &lt;span class='s'&gt;&amp;quot;/static/(.*)&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='p'&gt;},&lt;/span&gt;
    &lt;span class='c1'&gt;// default controller and action route&lt;/span&gt;
    &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Route&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;Name&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;       &lt;span class='s'&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;Pattern&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;    &lt;span class='s'&gt;&amp;quot;/{controller}/{action}/{id}&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;Default&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;    &lt;span class='kd'&gt;map&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;controller&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;home&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;action&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;},&lt;/span&gt;
        &lt;span class='nx'&gt;Constraint&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='kd'&gt;map&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='kt'&gt;string&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;\\d+&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;},&lt;/span&gt;
    &lt;span class='p'&gt;},&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='c1'&gt;// server config&lt;/span&gt;
&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;config&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ServerConfig&lt;/span&gt; &lt;span class='p'&gt;=&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ServerConfig&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='nx'&gt;Addr&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;           &lt;span class='s'&gt;&amp;quot;:8888&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='nx'&gt;ReadTimeout&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;    &lt;span class='mi'&gt;10&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='nx'&gt;time&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Second&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='nx'&gt;WriteTimeout&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;   &lt;span class='mi'&gt;10&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='nx'&gt;time&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Second&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='nx'&gt;MaxHeaderBytes&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class='mi'&gt;20&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='c1'&gt;//RootDir:        os.Getwd(),&lt;/span&gt;
    &lt;span class='nx'&gt;StaticPath&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;static&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='nx'&gt;ViewPath&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;   &lt;span class='s'&gt;&amp;quot;views&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='nx'&gt;Debug&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;      &lt;span class='kc'&gt;true&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='kd'&gt;func&lt;/span&gt; &lt;span class='nx'&gt;init&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='cm'&gt;/**&lt;/span&gt;
&lt;span class='cm'&gt;     * project root dir&lt;/span&gt;
&lt;span class='cm'&gt;     */&lt;/span&gt;
    &lt;span class='nx'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;filename&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;_&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;_&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nx'&gt;runtime&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Caller&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='nx'&gt;config&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;RootDir&lt;/span&gt; &lt;span class='p'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;path&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Dir&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;filename&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

    &lt;span class='cm'&gt;/**&lt;/span&gt;
&lt;span class='cm'&gt;     * Controller &amp;amp; Action&lt;/span&gt;
&lt;span class='cm'&gt;     */&lt;/span&gt;
    &lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Controller&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;home&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;
        &lt;span class='nx'&gt;Get&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;func&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ctx&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;HttpContext&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ActionResulter&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;ctx&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Html&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='p'&gt;})&lt;/span&gt;

&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='kd'&gt;func&lt;/span&gt; &lt;span class='nx'&gt;main&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='nx'&gt;rt&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;RouteTable&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='nx'&gt;Routes&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;routes&lt;/span&gt;&lt;span class='p'&gt;}&lt;/span&gt;
    &lt;span class='nx'&gt;s&lt;/span&gt; &lt;span class='o'&gt;:=&lt;/span&gt; &lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;CreateServer&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;rt&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kc'&gt;nil&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;config&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Logger&lt;/span&gt;&lt;span class='p'&gt;().&lt;/span&gt;&lt;span class='nx'&gt;Logln&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Server start on&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;s&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Addr&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='nx'&gt;log&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Fatal&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;s&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ListenAndServe&lt;/span&gt;&lt;span class='p'&gt;())&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='examples'&gt;Examples&lt;/h2&gt;

&lt;p&gt;You can found some examples in the &lt;code&gt;github.com/QLeelulu/goku/examples&lt;/code&gt; folder. &lt;br /&gt;To run example &amp;#8220;todo&amp;#8221; app, just:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='go'&gt;&lt;span class='err'&gt;$&lt;/span&gt; &lt;span class='nx'&gt;cd&lt;/span&gt; &lt;span class='err'&gt;$&lt;/span&gt;&lt;span class='nx'&gt;GOROOT&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='nx'&gt;src&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='nx'&gt;pkg&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='nx'&gt;github&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;com&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='nx'&gt;QLeelulu&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='nx'&gt;goku&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='nx'&gt;examples&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='nx'&gt;todo&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;
&lt;span class='err'&gt;$&lt;/span&gt; &lt;span class='k'&gt;go&lt;/span&gt; &lt;span class='nx'&gt;run&lt;/span&gt; &lt;span class='nx'&gt;app&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='k'&gt;go&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;maybe you need run &lt;code&gt;todo.sql&lt;/code&gt; first.&lt;/p&gt;

&lt;h2 id='authors'&gt;Authors&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='https://github.com/QLeelulu'&gt;QLeelulu&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;waiting for you&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='license'&gt;License&lt;/h2&gt;

&lt;p&gt;View the &lt;a href='https://github.com/QLeelulu/goku/blob/master/LICENSE'&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Jekyll Introduction</title>
   <link href="http://qleelulu.github.com/goku/lessons/jekyll-introduction"/>
   <updated>2011-12-29T00:00:00+08:00</updated>
   <id>http://qleelulu.github.com/goku/lessons/jekyll-introduction</id>
   <content type="html">&lt;p&gt;This Jekyll introduction will outline specifically what Jekyll is and why you would want to use it. Directly following the intro we&amp;#8217;ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it does.&lt;/p&gt;

&lt;h2 id='overview'&gt;Overview&lt;/h2&gt;

&lt;h3 id='what_is_jekyll'&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;主题：：： http://orderedlist.github.com/modernist/&lt;/p&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as &amp;#8220;a simple, blog aware, static site generator&amp;#8221;.&lt;/p&gt;

&lt;h3 id='examples'&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href='https://github.com/mojombo/jekyll/wiki/Sites'&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id='what_does_jekyll_do'&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system. Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files, compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder. The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3 id='jekyll_is_not_blogging_software'&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements. This is a common source of confusion when getting started. Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3 id='why_should_i_care'&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient. The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server. Traditional dynamic blogs like Wordpress require a database and server-side code. Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;

&lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;

&lt;li&gt;No internet connection required.&lt;/li&gt;

&lt;li&gt;Ability to publish via git.&lt;/li&gt;

&lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;

&lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;

&lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='how_jekyll_works'&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples. This information is not intended to specifically teach you how to do anything, rather it is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2 id='initial_setup'&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href='/index.html#start-now'&gt;installing jekyll&lt;/a&gt; you&amp;#8217;ll need to format your website directory in a way jekyll expects. Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3 id='the_jekyll_application_base_format'&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 20011-10-25-open-source-is-good.markdown
|   |-- 20011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;&lt;br /&gt;Stores configuration data.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt;&lt;br /&gt;This folder is for partial views.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt; &lt;br /&gt;This folder is for the main templates your content will be inserted into. You can have different layouts for different pages or page sections.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt;&lt;br /&gt;This folder contains your dynamic content/posts. the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt;&lt;br /&gt;This is where the generated site will be placed once Jekyll is done transforming it.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt;&lt;br /&gt;This folder is not part of the standard jekyll structure. The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory. Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(read more: &lt;a href='https://github.com/mojombo/jekyll/wiki/Usage'&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id='jekyll_configuration'&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here: &lt;a href='https://github.com/mojombo/jekyll/wiki/Configuration'&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='content_in_jekyll'&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page. These content &amp;#8220;objects&amp;#8221; get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3 id='posts_and_pages'&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax. Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3 id='working_with_posts'&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt; &lt;br /&gt;Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory. If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file. Additionally, each file must have &lt;a href='https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter'&gt;YAML Front-Matter&lt;/a&gt; prepended to its content. YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt;&lt;br /&gt;Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy. Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt; &lt;br /&gt;Posts can have tags associated with them as part of their meta-data. Tags may be placed on posts by providing them in the post&amp;#8217;s YAML front matter. You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt; &lt;br /&gt;Posts may be categorized by providing one or more categories in the YAML front matter. Categories offer more significance over tags in that they can be reflected in the URL path to the given post. Note categories in Jekyll work in a specific way. If you define more than one category you are defining a category hierarchy &amp;#8220;set&amp;#8221;. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title :  Hello World
categories : [lessons, beginner]
---&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines the category hierarchy &amp;#8220;lessons/beginner&amp;#8221;. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll. You won&amp;#8217;t find &amp;#8220;lessons&amp;#8221; and &amp;#8220;beginner&amp;#8221; as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3 id='working_with_pages'&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt;&lt;br /&gt;Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;In order to register as a Jekyll page the file must contain &lt;a href='https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter'&gt;YAML Front-Matter&lt;/a&gt;. Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt;&lt;br /&gt;Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt;&lt;br /&gt;If pages are defined in sub-directories, the path to the page will be reflected in the url. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;br /&gt;You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt;&lt;br /&gt;Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt;&lt;br /&gt;Generating a sitemap is good practice for SEO.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt;&lt;br /&gt;A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='templates_in_jekyll'&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page&amp;#8217;s or post&amp;#8217;s content. All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;. The site variable holds all accessible content and metadata relative to the site. The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt;&lt;br /&gt;Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;Templates should be coded in HTML and contain YAML Front Matter. All templates can contain Liquid code to work with your site&amp;#8217;s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt;&lt;br /&gt;There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;. The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined. Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id='subtemplates'&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they define another &amp;#8220;root&amp;#8221; layout/template within their YAML Front Matter. This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3 id='includes'&gt;Includes&lt;/h3&gt;

&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder. Includes are NOT templates, rather they are just code snippets that get included into templates. In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2 id='using_liquid_for_templating'&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll. This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3 id='what_is_liquid'&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href='https://github.com/Shopify/liquid'&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href='http://shopify.com'&gt;Shopify&lt;/a&gt;. Liquid is designed for end-users to be able to execute logic within template files without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with your site and post/page data.&lt;/p&gt;

&lt;h3 id='why_do_we_have_to_use_liquid'&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href='http://pages.github.com/'&gt;GitHub Pages&lt;/a&gt;. GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3 id='liquid_is_not_programmerfriendly'&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code. The point being you can&amp;#8217;t do jackshit in liquid that hasn&amp;#8217;t been allowed explicitly by the implementation. What&amp;#8217;s more you can only access data-structures that have been explicitly passed to the template.&lt;/p&gt;

&lt;p&gt;In Jekyll&amp;#8217;s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins. Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt; &lt;br /&gt;My personal stance is to not invest time trying to hack liquid. It&amp;#8217;s really unnecessary &lt;em&gt;from a programmer&amp;#8217;s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code) you are better off sticking with ruby. Toward that end I&amp;#8217;ve built &lt;a href='http://github.com/plusjade/mustache-with-jekyll'&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='static_assets'&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages. That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files.&lt;/p&gt;

&lt;h2 id='how_jekyll_parses_files'&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt; &lt;br /&gt;This is done with textile or markdown.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt; &lt;br /&gt;This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt;&lt;br /&gt;All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt; &lt;br /&gt;These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax. Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt; &lt;br /&gt;Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3 id='formatting_files_for_parsing'&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We&amp;#8217;ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;. Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty. This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
category : pages
tags : [how-to, jekyll]
---

... contents ...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block. The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here: &lt;a href='https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter'&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4 id='defining_layouts_for_posts_and_templates_parsing'&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into. If a template file specifies its own layout, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt; That is to say loading a post file into a template file that refers to another template file with work in the way you&amp;#8217;d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2 id='how_jekyll_generates_the_final_static_files'&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll&amp;#8217;s job is to generate a static representation of your website. The following is an outline of how that&amp;#8217;s done:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt; &lt;br /&gt;Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt; &lt;br /&gt;Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata. At this stage your site is one big computed ruby object.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt;&lt;br /&gt;Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s). Once the post is parsed and liquified inside the the proper layout structure, the layout itself is &amp;#8220;liquified&amp;#8221;. &lt;br /&gt;&lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt; &lt;br /&gt;Finally the liquid templates are &amp;#8220;rendered&amp;#8221;, thereby processing any liquid syntax provided in the templates and saving the final, static representation of the file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt;&lt;br /&gt;Because Jekyll computes the entire site in one fell swoop, each template is given access to a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you&amp;#8217;ll iterate through and format using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;

&lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap. You can also read the original documentation here: &lt;a href='https://github.com/mojombo/jekyll/wiki/Template-Data'&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='conclusion'&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does. As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2 id='next_steps'&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at &lt;a href='' /&gt; or jump right into &lt;a href=''&gt;Usage&lt;/a&gt; if you&amp;#8217;d like.&lt;/p&gt;</content>
 </entry>
 
 
</feed>